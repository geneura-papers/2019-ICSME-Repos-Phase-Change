load("/tmp/.fr-c9RSYY/BCRA/data/exampledata.rda")
View(exampledata)
View(exampledata)
install.packages("igraph")
install.packages("poweRlaw")
#!/usr/bin/Rscript
# Import poweRlaw library
library(poweRlaw)
# declaring vectors used
repo_names <- c("cask", "django", "mojo", "rakudo", "tty")
# Analysis for the 2017 repos
par(mfrow=c(3,2))
for (repo_name in repo_names){
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
plot(final_data, xlab="Commit Number", ylab="Commit Size", main= repo_name)
lines(final_data, type="l")
}
setwd("~/Documentos/Universidad/Phd/2019-ICSME-Repos-Phase-Change/data")
#!/usr/bin/Rscript
# Import poweRlaw library
library(poweRlaw)
# declaring vectors used
repo_names <- c("cask", "django", "mojo", "rakudo", "tty")
# Analysis for the 2017 repos
par(mfrow=c(3,2))
for (repo_name in repo_names){
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
plot(final_data, xlab="Commit Number", ylab="Commit Size", main= repo_name)
lines(final_data, type="l")
}
# declaring vectors used
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mfrow=c(3,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
}
# declaring vectors used
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mfrow=c(3,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
m_m = displ$new(final_data) # Declare fit object
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
#plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
#lines(m_m,col=2)
}
# declaring vectors used
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mfrow=c(3,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
m_m = displ$new(final_data) # Declare fit object
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
lines(m_m,col=2)
}
# declaring vectors used
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo = paste(repo_name," Params: alpha=",est$pars," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
lines(m_m,col=2)
}
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
m_1 = dispois$new(final_data)
m_2 = dislnorm$new(final_data)
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo = paste(repo_name," Params: alpha=",est$pars," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
lines(m_m,col=2)
lines(m_1,col=3)
lines(m_2,col=4)
}
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
m_1 = dispois$new(final_data)
m_1$setPars(estimate_pars(m2))
m_2 = dislnorm$new(final_data)
m_2$setPars(estimate_pars(m2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo = paste(repo_name," Params: alpha=",est$pars," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
m_1 = dispois$new(final_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(final_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo = paste(repo_name," Params: alpha=",est$pars," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_name)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
m_1 = dispois$new(final_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(final_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",est$pars," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(final_data) # Declare fit object
m_1 = dispois$new(final_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(final_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
m_2 = dislnorm$new(used_data)
m_2 = dislnorm$new(used_data)
# declaring vectors used
repo_name <- "mojo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(2000,4000,6000,8000,10000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
# declaring vectors used
repo_name <- "rakudo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(7,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(5000,10000,15000,20000,250000,30000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
repo_name <- "rakudo"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(7,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(5000,10000,15000,20000,25000,30000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
# declaring vectors used
repo_name <- "tty"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(7,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(200,400,600,800,1000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
# declaring vectors used
repo_name <- "tty"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(6,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(200,400,600,800,1000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
# declaring vectors used
repo_name <- "django"
# Analysis for the 2017 repos
par(mar = rep(2, 4))
par(mfrow=c(4,2))
repo = paste("lines_",repo_name,"_diffs.csv",sep="")
data <- read.csv(repo) # import data
data <- data[data>0] # erase commits with 0 changes
final_data = data.matrix(data) # Update vector type
for (n in c(10000,20000,30000,length(final_data))){
used_data <- final_data[1:n]
plot(used_data, xlab=" Commits", ylab="Commit Size", main= repo_name)
lines(used_data, type="l")
m_m = displ$new(used_data) # Declare fit object
m_1 = dispois$new(used_data)
m_1$setPars(estimate_pars(m_1))
m_2 = dislnorm$new(used_data)
m_2$setPars(estimate_pars(m_2))
est=estimate_xmin(m_m) # Estimate x_min
m_m$setXmin(est) # Set x_min as calculated
est_1=estimate_pars(m_m) # estimate parameters
repo_ti = paste(repo_name," Params: alpha=",round(est$pars,3)," xmin=",est$xmin,sep="")
plot(m_m, xlab="commit size", ylab="P(commit size)", main= repo_ti)
lines(m_m,col=2)
lines(m_1,col=3,lty=2)
lines(m_2,col=4,lty=3)
}
